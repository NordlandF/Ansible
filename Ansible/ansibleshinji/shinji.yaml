
---
- name: shinji
  hosts: all
  become: yes

  vars:
    acme_challenge_type: http-01
    acme_directory: https://acme-v02.api.letsencrypt.org/directory
    acme_version: 2
    acme_email: certificate-reminders@nord1.uberlegenheit.ru
    letsencrypt_dir: /etc/letsencrypt
    letsencrypt_keys_dir: /etc/letsencrypt/keys
    letsencrypt_csrs_dir: /etc/letsencrypt/csrs
    letsencrypt_certs_dir: /etc/letsencrypt/certs
    letsencrypt_account_key: /etc/letsencrypt/account/account.key
    domain_name: nord1.uberlegenheit.ru

  tasks:

#Проверка установлен ли nginx. Если нет, то установка nginx и запуск блока с настрокой nginx \ Если да, пропуск блока nginx

    - name: "Check or install nginx"
      ansible.builtin.apt:
        name: nginx
        state: present
      register: result

#Запуск блока 1 - первичная настройка Nginx

    - name: "Install nginx"
      when: result is changed
      block:

#Добавление Nginx в автозапуск

        - name: "Enabled nginx"
          ansible.builtin.systemd_service:
            name: nginx
            enabled: true

#Удаление дефолтных настроек (конфиг)

        - name: "Delete default server"
          ansible.builtin.file:
            state: absent
            path: /etc/nginx/sites-available/default

#Удаление ссылки на дефолтные настройки (конфиг)

        - name: "Delete link default server"
          ansible.builtin.file:
            state: absent
            path: /etc/nginx/sites-enabled/default

#Проверка изменений в настроенном для хоста конфиге или копирование настроенного конфига

    - name: "Check or copy main nginx config"
      ansible.builtin.copy:
        src: /home/nord/ansibleshinji/nginxconf/nginx2.conf
        dest: /etc/nginx/sites-enabled/nginx.conf
        owner: root
        group: root
        mode: '0644'

#Проверка изменений в настроенном для хоста начинки сайта или копирование данного контента

    - name: "Check or copy content nginx"
      ansible.builtin.copy:
        src: /home/nord/ansibleshinji/nginxsite/txt
        dest: /var/www
        owner: root
        group: root
        mode: '0644'

#Перезапуск Nginx для работы сайта при внесеных изменениях в конфиге или контенте (при первичной настройке выдает ошибку)

    - name: "Restart nginx"
      service: name=nginx state=reloaded
      ignore_errors: true

#Выгрузка информации из сертификата (для получения информации о сроке использования или о его наличии в этой директории

    - name: "Retrieve renewal information for a certificate"
      community.crypto.acme_certificate_renewal_info:
        acme_directory: https://acme-v02.api.letsencrypt.org/directory
        acme_version: 2
        certificate_path: /etc/letsencrypt/certs/nord1.uberlegenheit.ru.crt
      register: cert_data

#Получения информации о сертификате или о его наличии в этой директории

    - name: "Should the certificate be renewed?"
      ansible.builtin.debug:
        var: cert_data.should_renew

#При отсутствии в директории сертификата запускается блок "Сертификация", в ином случае весь блок скипается

    - name: "Sertification"
      when: cert_data.should_renew is true
      block:

#Копирование конфига, работающего на порте 80, и без указания места расположения сертификата и ключа к нему

        - name: "Copy nginx first config file"
          ansible.builtin.copy:
            src: /home/nord/ansibleshinji/nginxconf/nginx1.conf
            dest: /etc/nginx/sites-enabled/nginx.conf
            owner: root
            group: root
            mode: '0644'

#Копирование содержимого сайта, который описан в скопированном конфиге из предыдущего шага

        - name: "Recursive copy nginx content"
          ansible.builtin.copy:
            src: /home/nord/ansibleshinji/nginxsite/txt
            dest: /var/www
            owner: root
            group: root
            mode: '0644'

#Перезапуск Nginx, для запуска работы сайта по настройкам из предыдущих двух шагов в блоке

        - name: "Restart nginx"
          service: name=nginx state=reloaded

#Установка Certbot для получения сертификата

        - name: "Install сertbot"
          ansible.builtin.apt:
            name: certbot
            state: latest

#Создание каталогов для хранения необходимых файлов для получения сертификатов

        - name: "Create required directories in /etc/letsencrypt"
          ansible.builtin.file:
            path: "/etc/letsencrypt/{{ item }}"
            state: directory
            owner: root
            group: root
            mode: '0644'
          with_items:
            - account
            - certs
            - csrs
            - keys

#Генерация ключа аккаунта LE

        - name: "Generate a Let's Encrypt account key"
          shell: "if [ ! -f {{ letsencrypt_account_key }} ]; then openssl genrsa 4096 | sudo tee {{ letsencrypt_account_key }}; fi"

#Генерация приватного ключа LE

        - name: "Generate Let's Encrypt private key"
          shell: "openssl genrsa 4096 | sudo tee /etc/letsencrypt/keys/{{ domain_name }}.key"

#Генерация запроса на подпись сертификата

        - name: "Generate Let's Encrypt CSR"
          shell: "openssl req -new -sha256 -key /etc/letsencrypt/keys/{{ domain_name }}.key -subj \"/CN={{ domain_name }}\" -reqexts SAN -config <(cat /etc/ssl/openssl.cnf <(printf \"\n[SAN]\nsubjectAltName=DNS:{{ domain_name }},DNS:www.{{ domain_name }}\")) | sudo tee /etc/letsencrypt/csrs/{{ domain_name }}.csr"
          args:
            executable: /bin/bash

#Отправка запроса на подпись сертификата

        - name: "Begin Let's Encrypt challenges"
          community.crypto.acme_certificate:
            acme_directory: "{{ acme_directory }}"
            acme_version: "{{ acme_version }}"
            account_key_src: "{{ letsencrypt_account_key }}"
            account_email: "{{ acme_email }}"
            terms_agreed: 1
            challenge: "{{ acme_challenge_type }}"
            csr: "{{ letsencrypt_csrs_dir }}/{{ domain_name }}.csr"
            dest: "{{ letsencrypt_certs_dir }}/{{ domain_name }}.crt"
            fullchain_dest: "{{ letsencrypt_certs_dir }}/fullchain_{{ domain_name }}.crt"
            remaining_days: 91
          register: acme_challenge_nord1_uberlegenheit_ru

#Создание структуры каталогов .well-known/acme-challenge/, на которых должен работать сайт для получения сертификата

        - name: "Create .well-known/acme-challenge directory"
          file:
            path: /var/www/txt/.well-known/acme-challenge
            state: directory
            owner: root
            group: root
            mode: '0755'

#Чтение и применения challenge-файлов ACME, для подтверждения прав получить сертификат для запрошенных доменов и поддоменов

        - name: "Implement http-01 challenge files"
          copy:
            content: "{{ acme_challenge_nord1_uberlegenheit_ru['challenge_data'][item]['http-01']['resource_value'] }}"
            dest: "/var/www/txt/{{ acme_challenge_nord1_uberlegenheit_ru['challenge_data'][item]['http-01']['resource'] }}"
            owner: root
            group: root
            mode: '0644'
          with_items:
            - "{{ domain_name }}"
            - "www.{{ domain_name }}"

#Активация сервиса LE для проверки отправленных файлов с запросами, получение подписанного сертификата

        - name: "Complete Let's Encrypt challenges"
          acme_certificate:
            acme_directory: "{{ acme_directory }}"
            acme_version: "{{ acme_version }}"
            account_key_src: "{{ letsencrypt_account_key }}"
            account_email: "{{ acme_email }}"
            challenge: "{{ acme_challenge_type }}"
            csr: "{{ letsencrypt_csrs_dir }}/{{ domain_name }}.csr"
            dest: "{{ letsencrypt_certs_dir }}/{{ domain_name }}.crt"
            chain_dest: "{{ letsencrypt_certs_dir }}/chain_{{ domain_name }}.crt"
            fullchain_dest: "{{ letsencrypt_certs_dir }}/fullchain_{{ domain_name }}"
            data: "{{ acme_challenge_nord1_uberlegenheit_ru }}"

#Копирование конфига, работающего на порте 80 и 443, с указанием директорий с расположением сертификатов и ключей, а так же настройкой на перенаправление с http на https

        - name: "Copy and replace file nginx config file, after create sertificate"
          ansible.builtin.copy:
            src: /home/nord/ansibleshinji/nginxconf/nginx2.conf
            dest: /etc/nginx/sites-enabled/nginx.conf
            owner: root
            group: root
            mode: '0644'

#Копирование контента, который учтен в конфиге

        - name: "Check or copy content nginx"
          ansible.builtin.copy:
            src: /home/nord/ansibleshinji/nginxsite/txt
            dest: /var/www
            owner: root
            group: root
            mode: '0644'

#Перезапуск Nginx для восстановления работы сайта уже на https протоколе

        - name: "Restart nginx"
          service: name=nginx state=reloaded

